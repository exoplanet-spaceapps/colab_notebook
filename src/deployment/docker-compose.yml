version: '3.8'

services:
  # Main model server
  model-server:
    build:
      context: ../..
      dockerfile: src/deployment/Dockerfile
    image: kepler-model-server:latest
    container_name: kepler-server
    ports:
      - "8000:8000"
    volumes:
      - ../../models:/app/models:ro
      - ./logs:/app/logs
    environment:
      - MODEL_REGISTRY_PATH=/app/models
      - CACHE_SIZE=3
      - ENABLE_AB_TESTING=false
      - DEFAULT_MODEL=auto
      - LOG_LEVEL=info
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - kepler-network

  # Redis cache (optional)
  redis:
    image: redis:7-alpine
    container_name: kepler-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - kepler-network

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: kepler-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    restart: unless-stopped
    networks:
      - kepler-network

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: kepler-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    restart: unless-stopped
    depends_on:
      - prometheus
    networks:
      - kepler-network

  # NGINX reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: kepler-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - model-server
    restart: unless-stopped
    networks:
      - kepler-network

volumes:
  redis-data:
  prometheus-data:
  grafana-data:

networks:
  kepler-network:
    driver: bridge

# ============================================================================
# Usage Instructions:
# ============================================================================
#
# Start all services:
#   docker-compose up -d
#
# Start specific service:
#   docker-compose up -d model-server
#
# View logs:
#   docker-compose logs -f model-server
#
# Stop all services:
#   docker-compose down
#
# Stop and remove volumes:
#   docker-compose down -v
#
# Rebuild and restart:
#   docker-compose up -d --build
#
# Scale model server (load balancing):
#   docker-compose up -d --scale model-server=3
#
# Access services:
#   API: http://localhost:8000/docs
#   Prometheus: http://localhost:9090
#   Grafana: http://localhost:3000 (admin/admin)
#   Redis: localhost:6379
#
# Health checks:
#   docker-compose ps
#
# ============================================================================
